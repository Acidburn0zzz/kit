include "stdlib.h";

trait Allocator(T) {
    // function alloc[U: T](): Ptr[U];
    function allocBytes(n: Size): Ptr[T];
    // function free[U: T](ptr: Ptr[U]): Void;
}

struct SimpleAllocator {
    public var alloc: function (Size) -> Ptr[Void];
    public var free: function (Ptr[Void]) -> Void;
}

implement Allocator(Void) for SimpleAllocator {
    // public function alloc[U](): Ptr[U] {
    //     return (this[0])(sizeof U);
    // }

    public function allocBytes(n: Size): Ptr[Void] {
        return (this.alloc)(n);
    }

    // public function free[U](ptr: Ptr[U]) {
    //     (this.free)(ptr);
    // }
}

var simpleMalloc: SimpleAllocator = struct SimpleAllocator {
    alloc: malloc,
    free: free,
};

// will be used as the default allocator
var mallocator: Box[Allocator] = simpleMalloc as Box[Allocator];
