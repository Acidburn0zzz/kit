/**
 * An Iterable is something, generally a collection, which can be iterated
 * over, e.g. using a for loop. `Iterable`s produce an `Iterator` which
 * contains the state for a single iteration.
 *
 * Each type can implement Iterable once and declare an associated type,
 * `IteratorT`, which is the type of values that the iterator will produce.
 *
 * A numeric range `(n ... m)` is an intrinsic which compiles to a fast numeric
 * for loop; rewrite rules can be used to optimize iteration over specific
 * collections into iteration over numeric indices to avoid creating
 * unnecessary `Iterator` instances when a collection's type is known.
 */
trait Iterable(IteratorT) {
    public function iterator(): Box[Iterator[IteratorT]];
}

/**
 * An `Iterator` stores the context necessary for iterating over a collection
 * of values. Each call to `next` should return the next value, or None.
 */
trait Iterator[T] {
    public function next(): (Box[Iterator[T]], Option[T]);
}

/*
implement Iterable(T) for Iterator[T] {
    public function iterator(): Box[Iterator[T]] {
        return this;
    }
}
*/
