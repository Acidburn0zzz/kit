enum MySimpleEnum {
    Apple;
    Banana;
    Strawberry;

    public function toString(): CString {
        return match this {
            Apple => "apple";
            Banana => "banana";
            Strawberry => "strawberry";
        }
    }
}

enum MyComplexEnum {
    Apple2(i: Int);
    Banana2(a: Float, b: CString);
    Strawberry2;
}

function f(x: MyComplexEnum) {
    match d {
        Apple2(i) => {
            printf("Apple2: %i\n", i);
        }
        Banana2(a, b) => {
            printf("Banana2: %.1f, %s\n", a, b);
        }
        Strawberry2 => {
            printf("Strawberry2\n");
        }
    }
}

function main() {
    // simple enums
    var a = Apple;
    var b = Banana;

    // complex enums with fields
    var c = Apple2(1);
    var d = Banana2(5, "hello");
    var e = Strawberry2;

    // unification between enum type and variants
    var f: MyComplexEnum = d;
    f = e;

    // simple enum equality
    if (a != b) {
        printf("hello!\n");
    }

    // TODO: complex enum equality (not yet implemented)

    // simple enum methods + match
    printf("%s\n", a.toString());
    printf("%s\n", b.toString());

    // complex enum match with destructuring
    f(c);
    f(d);
    f(e);
}
